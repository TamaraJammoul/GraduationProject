{
    "sourceFile": "client-app/src/core/store/core.actions.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1627517528386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1627518913842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { AppInsightsEvent } from '@core/models/event.model';\r\n import { AlertMessage } from '@core/models/alert-message.model';\r\n import { idleConstants } from '@core/models/idle.constants';\r\n import { ApplicationSettings } from '@core/models/application-settings.model';\r\n-import { BaseListingItem } from '@root/libs/shared/models/base-listing-item.models';\r\n+import { BaseListingItem } from '@core/models/base-listing-item.models';\r\n \r\n \r\n const toggleAuthenticationStatus = createAction('[Core] Toggle authentication status');\r\n const initiateAuthentication = createAction('[Core] Initiate authentication');\r\n"
                }
            ],
            "date": 1627517528386,
            "name": "Commit-0",
            "content": "import { createAction } from '@ngrx/store';\r\nimport { UserClaims } from '@core/models/user-claims.model';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ToastMessage } from '@core/models/toast-message.model';\r\nimport { AppInsightsEvent } from '@core/models/event.model';\r\nimport { AlertMessage } from '@core/models/alert-message.model';\r\nimport { idleConstants } from '@core/models/idle.constants';\r\nimport { ApplicationSettings } from '@core/models/application-settings.model';\r\nimport { BaseListingItem } from '@root/libs/shared/models/base-listing-item.models';\r\n\r\n\r\nconst toggleAuthenticationStatus = createAction('[Core] Toggle authentication status');\r\nconst initiateAuthentication = createAction('[Core] Initiate authentication');\r\nconst validateOidcCallback = createAction('[Core] Validate oidc callback');\r\nconst fetchUserClaimsSuccess = createAction('[Core] Fetch user claims success', (payload: UserClaims) => ({ payload }));\r\nconst displayHttpError = createAction('[Core] Display Http error', (httpErrorResponse: HttpErrorResponse) => ({ payload: httpErrorResponse }));\r\nconst displayNotification = createAction('[Core] Display notification', (level: string, message: string) => ({ level, message }));\r\nconst toggleBetaMode = createAction('[Core] Toggle beta mode');\r\nconst logout = createAction('[Core] Logout');\r\nconst scheduleIdleCheck = createAction('[Core] Schedule idle check', () => ({ timeBeforeIdleCheck: idleConstants.timeInMinutesBetweenIdleChecks * 60 * 1000 }));\r\nconst idleCheck = createAction('[Core] Idle check');\r\nconst hideToast = createAction('[Core] Hide toast');\r\nconst hideAlert = createAction('[Core] Hide alert');\r\nconst setAppInsightsContext = createAction('[Core] Set App Insights Context', (payload: UserClaims) => ({ payload }));\r\n\r\nconst displayToast = createAction('[Core] Display toast', (toast: ToastMessage) => ({ toast }));\r\nconst displayAlert = createAction('[Core] Display alert', (alert: AlertMessage) => ({ alert }));\r\nconst logEvent = createAction('[Core] Log event', (eventInfo: AppInsightsEvent) => ({ payload: eventInfo }));\r\n\r\nconst showSpinner = createAction('[Core] Show Spinner1', (contextId: string) => ({ contextId }));\r\nconst hideSpinner = createAction('[Core] Hide Spinner1', (contextId: string) => ({ contextId }));\r\nconst clearSpinner = createAction('[Core] Clear Spinner1');\r\n\r\nconst setAppTitle = createAction('[core] Set App Title', (title: string) => ({ title }));\r\n\r\nconst setTitleApp = createAction('[core] Set Title App', (title: string[]) => ({ title }));\r\n\r\nconst fetchApplicationSettings = createAction('[core] Fetch Application Settings');\r\n\r\nconst fetchApplicationSettingsSuccess =\r\n  createAction('[core] Fetch Application Settings Success', (applicationSettings: ApplicationSettings) => ({ applicationSettings }));\r\n\r\nconst fetchOperatingIntermediary = createAction('[core] Fetch Operating Intermediary');\r\n\r\nconst fetchOperatingIntermediarySuccess =\r\n  createAction('[core] Fetch Operating Intermediary Success', (payload: BaseListingItem) => ({ payload }));\r\n\r\nexport const coreActions = {\r\n  toggleAuthenticationStatus,\r\n  initiateAuthentication,\r\n  validateOidcCallback,\r\n  fetchUserClaimsSuccess,\r\n  displayHttpError,\r\n  displayNotification,\r\n  toggleBetaMode,\r\n  logout,\r\n  scheduleIdleCheck,\r\n  idleCheck,\r\n  hideToast,\r\n  hideAlert,\r\n  setAppInsightsContext,\r\n  showSpinner,\r\n  hideSpinner,\r\n  clearSpinner,\r\n  displayToast,\r\n  displayAlert,\r\n  logEvent,\r\n  setAppTitle,\r\n  setTitleApp,\r\n  fetchApplicationSettings,\r\n  fetchApplicationSettingsSuccess,\r\n  fetchOperatingIntermediary,\r\n  fetchOperatingIntermediarySuccess\r\n};\r\n"
        }
    ]
}