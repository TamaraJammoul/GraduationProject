{
    "sourceFile": "client-app/src/core/store/core.reducers.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528383,
            "name": "Commit-0",
            "content": "/*import { toastMessageReducer, alertMessageReducer } from '@core/store/core.reducers';\r\nimport { coreActions } from '@core/store/core.actions';\r\nimport { ToastType } from '@core/models/toast-type.enum';\r\nimport { ToastMessage } from '@core/models/toast-message.model';\r\nimport { AlertMessage } from '@core/models/alert-message.model';\r\nimport { AlertType } from '@core/models/alert-type.enum';\r\ndescribe(toastMessageReducer.name, () => {\r\n\r\n  it('should update state  when displayToast is received', () => {\r\n    const toast = { message: 'Testing', toastType: ToastType.success } as ToastMessage;\r\n\r\n    const action = coreActions.displayToast(toast);\r\n    const newState = toastMessageReducer(toast, action);\r\n    expect(newState.message).toBe(toast.message);\r\n    expect(newState.toastType).toBe(ToastType.success);\r\n  });\r\n\r\n  it('should update state to remove toast when hideToast is received', () => {\r\n    const toast = { message: 'Testing' } as ToastMessage;\r\n\r\n    const action = coreActions.displayToast(toast);\r\n    let newState = toastMessageReducer(toast, action);\r\n    expect(newState).toBe(toast);\r\n\r\n    const hideAction = coreActions.hideToast();\r\n    newState = toastMessageReducer(toast, hideAction);\r\n    expect(newState).toBeUndefined();\r\n  });\r\n\r\n  it('should update state  when displayAlert is received', () => {\r\n    const alert = { title: 'Title', message: 'Testing', alertType: AlertType.success } as AlertMessage;\r\n\r\n    const action = coreActions.displayAlert(alert);\r\n    const newState = alertMessageReducer(alert, action);\r\n    expect(newState.title).toBe(alert.title);\r\n    expect(newState.message).toBe(alert.message);\r\n    expect(newState.alertType).toBe(AlertType.success);\r\n  });\r\n\r\n  it('should update state to remove alert when hideAlert is received', () => {\r\n    const alert = { title: 'Title', message: 'Testing', alertType: AlertType.success } as AlertMessage;\r\n\r\n    const action = coreActions.displayAlert(alert);\r\n    let newState = alertMessageReducer(alert, action);\r\n    expect(newState).toBe(alert);\r\n\r\n    const hideAction = coreActions.hideAlert();\r\n    newState = alertMessageReducer(alert, hideAction);\r\n    expect(newState).toBeUndefined();\r\n  });\r\n\r\n});*/\r\n"
        }
    ]
}