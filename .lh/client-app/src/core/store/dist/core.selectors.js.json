{
    "sourceFile": "client-app/src/core/store/dist/core.selectors.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528376,
            "name": "Commit-0",
            "content": "\"use strict\";\nexports.__esModule = true;\nexports.getApplicationSettings = exports.getTitleApp = exports.getAppTitle = exports.getIsSpinning = exports.getAlertMessages = exports.getToastMessages = exports.getIsIntermediaryAccount = exports.getIsOrganisationAccount = exports.getIsVenueAccount = exports.getIsCompanyContentManager = exports.getIsAccountManagerUser = exports.getUserRole = exports.getIsBetaMode = exports.getIsAnOrganisationClient = exports.getIsAVenueClient = exports.getClientCode = exports.getUserEmail = exports.getUserClaims = exports.getIsAuthenticated = exports.getIsUserStateFetched = exports.getUser = void 0;\nvar store_1 = require(\"@ngrx/store\");\nvar core_state_1 = require(\"@core/store/core.state\");\nvar role_enum_1 = require(\"@core/models/role.enum\");\nvar featureSelector = store_1.createFeatureSelector(core_state_1.CORE_FEATURE_NAME);\nexports.getUser = store_1.createSelector(featureSelector, function (state) { return state.user; });\nexports.getIsUserStateFetched = store_1.createSelector(exports.getUser, function (state) { return state.isFetched; });\nexports.getIsAuthenticated = store_1.createSelector(exports.getUser, function (state) { return state.isAuthenticated; });\nexports.getUserClaims = store_1.createSelector(exports.getUser, function (state) { return state.userClaims; });\nexports.getUserEmail = store_1.createSelector(exports.getUserClaims, function (state) { return state === null || state === void 0 ? void 0 : state.email; });\nexports.getClientCode = store_1.createSelector(exports.getUserClaims, function (state) { return state === null || state === void 0 ? void 0 : state.organisationCode; });\nexports.getIsAVenueClient = store_1.createSelector(exports.getUserClaims, function (state) { return state === null || state === void 0 ? void 0 : state.isVenueClient; });\nexports.getIsAnOrganisationClient = store_1.createSelector(exports.getUserClaims, function (state) { return state === null || state === void 0 ? void 0 : state.isOrganisationClient; });\nexports.getIsBetaMode = store_1.createSelector(featureSelector, function (state) { return state.isBetaMode; });\nexports.getUserRole = store_1.createSelector(exports.getUserClaims, function (state) { return state === null || state === void 0 ? void 0 : state.roles; });\nexports.getIsAccountManagerUser = store_1.createSelector(exports.getUserRole, function (state) { return state.filter(function (r) { return r === role_enum_1.Role.AccountManager; }).length > 0; });\nexports.getIsCompanyContentManager = store_1.createSelector(exports.getUserRole, function (state) {\n    return state.filter(function (r) { return r === role_enum_1.Role.CompanyContentManager; }).length > 0;\n});\n// export const getIsFinancialOrSeniorOperatorUser = createSelector(getIsFinancialUser, getIsAccountManagerUser, (isFinancialOperator, isSeniorOperator) => {\n//   return (isFinancialOperator || isSeniorOperator);\n// });\n// FERAS\nexports.getIsVenueAccount = store_1.createSelector(exports.getUserClaims, function (state) { return state === null || state === void 0 ? void 0 : state.isVenueClient; });\nexports.getIsOrganisationAccount = store_1.createSelector(exports.getUserClaims, function (state) { return state === null || state === void 0 ? void 0 : state.isOrganisationClient; });\nexports.getIsIntermediaryAccount = store_1.createSelector(exports.getUserClaims, function (state) { return state === null || state === void 0 ? void 0 : state.isIntermediaryClient; });\nexports.getToastMessages = store_1.createSelector(featureSelector, function (state) { return state.toastMessage; });\nexports.getAlertMessages = store_1.createSelector(featureSelector, function (state) { return state.alertMessage; });\nexports.getIsSpinning = store_1.createSelector(featureSelector, function (state) { return state.spinner.isLoading; });\nexports.getAppTitle = store_1.createSelector(featureSelector, function (state) { return state.appTitle; });\nexports.getTitleApp = store_1.createSelector(featureSelector, function (state) { return state.titleApp; });\nexports.getApplicationSettings = store_1.createSelector(featureSelector, function (state) { return state.applicationSettings; });\n"
        }
    ]
}