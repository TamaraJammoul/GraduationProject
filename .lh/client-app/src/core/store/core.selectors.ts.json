{
    "sourceFile": "client-app/src/core/store/core.selectors.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528382,
            "name": "Commit-0",
            "content": "import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { CoreState, CORE_FEATURE_NAME } from '@core/store/core.state';\r\nimport { Role } from '@core/models/role.enum';\r\n\r\nconst featureSelector = createFeatureSelector<CoreState>(CORE_FEATURE_NAME);\r\n\r\nexport const getUser = createSelector(featureSelector, (state) => state.user);\r\nexport const getIsUserStateFetched = createSelector(getUser, (state) => state.isFetched);\r\n\r\nexport const getIsAuthenticated = createSelector(getUser, (state) => state.isAuthenticated);\r\nexport const getUserClaims = createSelector(getUser, (state) => state.userClaims);\r\nexport const getUserEmail = createSelector(getUserClaims, (state) => state?.email);\r\n\r\nexport const getClientCode=createSelector(getUserClaims, (state) => state?.businessEntityCode);\r\nexport const getIsAVenueClient=createSelector(getUserClaims, (state) => state?.isVenueClient);\r\nexport const getIsAnOrganisationClient=createSelector(getUserClaims, (state) => state?.isOrganisationClient);\r\n\r\nexport const getIsBetaMode = createSelector(featureSelector, (state) => state.isBetaMode);\r\n\r\nexport const getUserRole = createSelector(getUserClaims, (state) => state?.roles);\r\nexport const getIsAccountManagerUser = createSelector(getUserRole, (state) => state.filter(r => r === Role.AccountManager).length > 0);\r\nexport const getIsCompanyContentManager = createSelector(getUserRole, (state) =>\r\n    state.filter(r => r === Role.CompanyContentManager).length > 0);\r\n\r\n// export const getIsFinancialOrSeniorOperatorUser = createSelector(getIsFinancialUser, getIsAccountManagerUser, (isFinancialOperator, isSeniorOperator) => {\r\n//   return (isFinancialOperator || isSeniorOperator);\r\n// });\r\n\r\n// FERAS\r\nexport const getIsVenueAccount = createSelector(getUserClaims, (state) => state?.isVenueClient);\r\nexport const getIsOrganisationAccount = createSelector(getUserClaims, (state) => state?.isOrganisationClient);\r\nexport const getIsIntermediaryAccount = createSelector(getUserClaims, (state) => state?.isIntermediaryClient);\r\n\r\nexport const getToastMessages = createSelector(featureSelector, (state) => state.toastMessage);\r\nexport const getAlertMessages = createSelector(featureSelector, (state) => state.alertMessage);\r\n\r\nexport const getIsSpinning = createSelector(featureSelector, (state) => state.spinner.isLoading);\r\n\r\nexport const getAppTitle = createSelector(featureSelector, (state) => state.appTitle);\r\n\r\n\r\nexport const getTitleApp = createSelector(featureSelector, (state) => state.titleApp);\r\n\r\nexport const getApplicationSettings = createSelector(featureSelector, (state) => state.applicationSettings);\r\n\r\nexport const fetchOperatingIntermediary = createSelector(featureSelector, (state) => state.operatingIntermediary);\r\n"
        }
    ]
}