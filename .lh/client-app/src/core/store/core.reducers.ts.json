{
    "sourceFile": "client-app/src/core/store/core.reducers.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528382,
            "name": "Commit-0",
            "content": "/* eslint-disable  */\r\nimport { ActionReducerMap, createReducer, on } from '@ngrx/store';\r\nimport { CoreState, UserState } from '@core/store/core.state';\r\nimport { coreActions } from '@core/store/core.actions';\r\nimport { ToastMessage } from '@core/models/toast-message.model';\r\nimport { AlertMessage } from '@core/models/alert-message.model';\r\nimport { Spinner } from '@core/models/spinner.model';\r\nimport { state } from '@angular/animations';\r\nimport { ApplicationSettings } from '@core/models/application-settings.model';\r\nimport { BaseListingItem } from '@root/libs/shared/models/base-listing-item.models';\r\n\r\nexport const userReducer=createReducer({} as UserState,\r\n  on(coreActions.toggleAuthenticationStatus, (state) => ({ ...state, isAuthenticated: !state.isAuthenticated })),\r\n  on(coreActions.fetchUserClaimsSuccess, (state, { payload }) => ({ ...state, userClaims: payload, isFetched: true }))\r\n);\r\n\r\nexport const isBetaModeReducer=createReducer(false,\r\n  on(coreActions.toggleBetaMode, (state) => !state)\r\n);\r\n\r\nexport const toastMessageReducer=createReducer(undefined as ToastMessage,\r\n  on(coreActions.displayToast, (_, { toast }) => toast),\r\n  on(coreActions.hideToast, (_) => undefined)\r\n);\r\n\r\nexport const alertMessageReducer=createReducer(undefined as AlertMessage,\r\n  on(coreActions.displayAlert, (_, { alert }) => alert),\r\n  on(coreActions.hideAlert, (_) => undefined)\r\n);\r\n\r\nexport const spinnerReducer1=createReducer(\r\n  {\r\n    isLoading: false,\r\n    contextId: '',\r\n    spinnerCount: 0\r\n  } as Spinner,\r\n  on(coreActions.showSpinner, (state, { contextId }) => ({ ...state, contextId, isLoading: true })),\r\n  on(coreActions.hideSpinner, (state, { contextId }) => {\r\n    if (contextId===state.contextId) {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        contextId: null,\r\n      };\r\n    }\r\n    return state;\r\n  }),\r\n  on(coreActions.clearSpinner, () => ({ ...state, isLoading: false, contextId: '' }))\r\n);\r\n\r\n\r\nexport const appTitleReducer=createReducer('dashboard',\r\n  on(coreActions.setAppTitle, (_, { title }) => title)\r\n)\r\n\r\n\r\nexport const titleReducer = createReducer([] , \r\n  on(coreActions.setTitleApp, (_, {title}) => title)\r\n  )\r\n\r\nexport const applicationSettingsReducer = createReducer({} as ApplicationSettings,\r\n  on(coreActions.fetchApplicationSettingsSuccess, (_, { applicationSettings }) => applicationSettings)\r\n)\r\n\r\nexport const operatingIntermediaryReducer = createReducer({} as BaseListingItem,\r\n  on(coreActions.fetchOperatingIntermediarySuccess, (_, { payload }) => payload)\r\n)\r\n\r\nexport const reducers: ActionReducerMap<CoreState>={\r\n  user: userReducer,\r\n  isBetaMode: isBetaModeReducer,\r\n  toastMessage: toastMessageReducer,\r\n  alertMessage: alertMessageReducer,\r\n  spinner: spinnerReducer1,\r\n  appTitle: appTitleReducer,\r\n  titleApp: titleReducer,\r\n  applicationSettings: applicationSettingsReducer,\r\n  operatingIntermediary: operatingIntermediaryReducer\r\n};\r\n"
        }
    ]
}