{
    "sourceFile": "client-app/src/core/store/core.effects.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1627517528386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1627519199170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,52 +2,25 @@\n import { createEffect, Actions, ofType } from '@ngrx/effects';\r\n import { coreActions } from '@core/store/core.actions';\r\n import { AuthenticationService } from '@core/services/authentication.service';\r\n import { concatMap, switchMap, map, tap, delay } from 'rxjs/operators';\r\n-import { routerActions } from '@routing/store/router.actions';\r\n-import { ApplicationRoutes } from '@libs/shared/settings/common.settings';\r\n-import { MonitoringService } from '@libs/shared/monitoring/monitoring.service';\r\n-// import { NotificationsService } from '@core/services/notifications.service';\r\n+import { MonitoringService } from '@root/monitoring/monitoring.service';\r\n import { of } from 'rxjs';\r\n import { IdleService } from '@core/services/idle.service';\r\n import { UserRightsService } from '@core/services/user-rights.service';\r\n-import { SnackBarNotificationService } from '@libs/shared/notifications/services/snackbar-notification.service';\r\n+import { SnackBarNotificationService } from '@core/services/snackbar-notification.service';\r\n import { ApplicationSettingsService } from '@core/services/application-settings.service';\r\n-import { catchHttpError } from '@libs/shared/custom/custom.pipeables';\r\n+import { catchHttpError } from '@root/custom/custom.pipeables';\r\n import { BusinessRelationsService } from '../services/business-relations.service';\r\n @Injectable()\r\n export class CoreEffects {\r\n \r\n-  initiateAuthentication$ = createEffect(() => this.actions$.pipe(\r\n-    ofType(coreActions.initiateAuthentication),\r\n-    map(() => {\r\n-      if (this.authService.isAuthenticated()) {\r\n-        return coreActions.toggleAuthenticationStatus();\r\n-      } else {\r\n-        this.authService.login();\r\n-        return routerActions.go({ path: [ApplicationRoutes.AutoLogin] });\r\n-      }\r\n-    })\r\n-  ));\r\n-\r\n   validateOidcCallback$ = createEffect(() => this.actions$.pipe(\r\n     ofType(coreActions.validateOidcCallback),\r\n     switchMap(() => this.authService.validateCallback()),\r\n     map(() => coreActions.toggleAuthenticationStatus())\r\n   ));\r\n-\r\n-  getUserClaims$ = createEffect(() => this.actions$.pipe(\r\n-    ofType(coreActions.toggleAuthenticationStatus),\r\n-    switchMap(() => this.authService.getUserClaims()),\r\n-    concatMap(claims =>\r\n-      [\r\n-        coreActions.fetchUserClaimsSuccess(claims),\r\n-        ...(this.authService.isRootRoute() ? [routerActions.go({ path: [this.userRightsService.getStartupRoute(claims.roles)] })] : []),\r\n-        coreActions.scheduleIdleCheck(),\r\n-        coreActions.setAppInsightsContext(claims)\r\n-      ])\r\n-  ));\r\n-\r\n+  \r\n   logout$ = createEffect(() => this.actions$.pipe(\r\n     ofType(coreActions.logout),\r\n     tap(() => this.authService.logout()),\r\n   ), { dispatch: false });\r\n"
                }
            ],
            "date": 1627517528386,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\r\nimport { coreActions } from '@core/store/core.actions';\r\nimport { AuthenticationService } from '@core/services/authentication.service';\r\nimport { concatMap, switchMap, map, tap, delay } from 'rxjs/operators';\r\nimport { routerActions } from '@routing/store/router.actions';\r\nimport { ApplicationRoutes } from '@libs/shared/settings/common.settings';\r\nimport { MonitoringService } from '@libs/shared/monitoring/monitoring.service';\r\n// import { NotificationsService } from '@core/services/notifications.service';\r\nimport { of } from 'rxjs';\r\nimport { IdleService } from '@core/services/idle.service';\r\nimport { UserRightsService } from '@core/services/user-rights.service';\r\nimport { SnackBarNotificationService } from '@libs/shared/notifications/services/snackbar-notification.service';\r\nimport { ApplicationSettingsService } from '@core/services/application-settings.service';\r\nimport { catchHttpError } from '@libs/shared/custom/custom.pipeables';\r\nimport { BusinessRelationsService } from '../services/business-relations.service';\r\n@Injectable()\r\nexport class CoreEffects {\r\n\r\n  initiateAuthentication$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.initiateAuthentication),\r\n    map(() => {\r\n      if (this.authService.isAuthenticated()) {\r\n        return coreActions.toggleAuthenticationStatus();\r\n      } else {\r\n        this.authService.login();\r\n        return routerActions.go({ path: [ApplicationRoutes.AutoLogin] });\r\n      }\r\n    })\r\n  ));\r\n\r\n  validateOidcCallback$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.validateOidcCallback),\r\n    switchMap(() => this.authService.validateCallback()),\r\n    map(() => coreActions.toggleAuthenticationStatus())\r\n  ));\r\n\r\n  getUserClaims$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.toggleAuthenticationStatus),\r\n    switchMap(() => this.authService.getUserClaims()),\r\n    concatMap(claims =>\r\n      [\r\n        coreActions.fetchUserClaimsSuccess(claims),\r\n        ...(this.authService.isRootRoute() ? [routerActions.go({ path: [this.userRightsService.getStartupRoute(claims.roles)] })] : []),\r\n        coreActions.scheduleIdleCheck(),\r\n        coreActions.setAppInsightsContext(claims)\r\n      ])\r\n  ));\r\n\r\n  logout$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.logout),\r\n    tap(() => this.authService.logout()),\r\n  ), { dispatch: false });\r\n\r\n\r\n\r\n  scheduleIdleCheck$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.scheduleIdleCheck),\r\n    switchMap(({ timeBeforeIdleCheck }) => of(timeBeforeIdleCheck).pipe(delay(timeBeforeIdleCheck))),\r\n    map(() => coreActions.idleCheck())\r\n  ));\r\n\r\n  logEvent$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.logEvent),\r\n    tap(({ payload }) => this.monitoringService.logEvent(\r\n      `${payload.event}: ${payload.identifier}`,\r\n      payload.properties)),\r\n  ), { dispatch: false });\r\n\r\n  setAppInsightsSecurityContext$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.setAppInsightsContext),\r\n    tap((claims) => this.monitoringService.setSecurityContext(claims.payload.email)),\r\n  ), { dispatch: false });\r\n\r\n  displayHttpError$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.displayHttpError),\r\n    tap(({ payload }) => this.monitoringService.logException(payload.error, payload.status >= 500 ? 'Backend' : 'Frontend')),\r\n    tap(({ payload }) => this.snackbarService.error(payload.message)),\r\n  ), { dispatch: false });\r\n\r\n  displayNotification$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.displayNotification),\r\n    tap(({ message }) => this.snackbarService.error(message)),\r\n  ), { dispatch: false });\r\n\r\n  idleCheck$ = createEffect(() => this.actions$.pipe(\r\n    ofType(coreActions.idleCheck),\r\n    concatMap(() =>\r\n      [\r\n        this.idleService.isIdle() ?\r\n          this.idleService.displayIdleAlert(() => this.idleService.scheduleIdleCheck(), () => this.authService.autoLogout())\r\n          : this.idleService.scheduleIdleCheck(),\r\n        this.authService.checkAuthentication()\r\n      ])\r\n  ), { dispatch: false });\r\n\r\n  fetchApplicationSetting$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(coreActions.fetchApplicationSettings),\r\n      switchMap(() => (\r\n        this.applicationSettingsService.fetchApplicationSettings().pipe(\r\n          map((result) => coreActions.fetchApplicationSettingsSuccess(result),\r\n            catchHttpError()\r\n          )\r\n        )\r\n      ))\r\n    )\r\n  );\r\n\r\n  fetchOperatingIntermediary$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(coreActions.fetchOperatingIntermediary),\r\n      switchMap(() => (\r\n        this.businessRelationsService.fetchOperatingIntermediary().pipe(\r\n          map((result) => coreActions.fetchOperatingIntermediarySuccess(result),\r\n            catchHttpError()\r\n          )\r\n        )\r\n      ))\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private authService: AuthenticationService,\r\n    private monitoringService: MonitoringService,\r\n    // private notificationService: NotificationsService,\r\n    private snackbarService: SnackBarNotificationService,\r\n    private idleService: IdleService,\r\n    private userRightsService: UserRightsService,\r\n    private applicationSettingsService: ApplicationSettingsService,\r\n    private businessRelationsService: BusinessRelationsService\r\n  ) {\r\n  }\r\n}\r\n"
        }
    ]
}