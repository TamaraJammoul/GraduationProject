{
    "sourceFile": "client-app/src/core/services/can-access-feature.guard.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528682,
            "name": "Commit-0",
            "content": "import { configureTestSuite } from '@root/fakes/fakes.utils';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { FakesModule } from '@root/fakes/fakes.module';\r\nimport { CanAccessFeatureGuard } from '@core/services/can-access-feature.guard';\r\nimport { stub } from 'sinon';\r\nimport { UserRightsService } from '@core/services/user-rights.service';\r\nimport { of } from 'rxjs';\r\nimport { Route, UrlTree } from '@angular/router';\r\nimport { provideMockStore } from '@ngrx/store/testing';\r\nimport { ApplicationRoutes } from '@libs/shared/settings/common.settings';\r\n\r\ndescribe(CanAccessFeatureGuard.name, () => {\r\n  let canAccessFeatureGuard: CanAccessFeatureGuard;\r\n  let userRightsService: UserRightsService;\r\n\r\n  configureTestSuite(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [FakesModule],\r\n      declarations: [],\r\n      providers: [CanAccessFeatureGuard, UserRightsService, provideMockStore()]\r\n    });\r\n  });\r\n\r\n  beforeEach(() => {\r\n    canAccessFeatureGuard = TestBed.inject(CanAccessFeatureGuard);\r\n    userRightsService = TestBed.inject(UserRightsService);\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(canAccessFeatureGuard).toBeTruthy();\r\n  });\r\n\r\n  it('should return true when can access to feature', () => {\r\n    let result: boolean;\r\n    const route = {\r\n      data: {\r\n        feature: 'feature'\r\n      }\r\n    } as Route;\r\n    const stubFn = stub(userRightsService, 'canAccess').returns(of(true));\r\n    canAccessFeatureGuard.canLoad(route).subscribe((res: boolean) => result = res);\r\n    expect(result).toBe(true);\r\n    stubFn.restore();\r\n  });\r\n\r\n  it('should return url tree when can not access to feature', () => {\r\n    let result: UrlTree;\r\n    const route = {\r\n      data: {\r\n        feature: 'feature'\r\n      }\r\n    } as Route;\r\n    const stubFn = stub(userRightsService, 'canAccess').returns(of(false));\r\n    const stubTreeFn = stub(userRightsService, 'getStartupRouteTree').returns(of(ApplicationRoutes.BookingList));\r\n    canAccessFeatureGuard.canLoad(route).subscribe((res: UrlTree) => result = res);\r\n    expect(result).toBeTruthy();\r\n    stubFn.restore();\r\n    stubTreeFn.restore();\r\n  });\r\n\r\n  it('should throw error when feature is not defined in route', () => {\r\n    const route = {\r\n      data: {}\r\n    } as Route;\r\n    const stubFn = stub(userRightsService, 'canAccess').returns(of(true));\r\n    expect(() => canAccessFeatureGuard.canLoad(route)).toThrowError('Feature not defined');\r\n    stubFn.restore();\r\n  });\r\n});\r\n"
        }
    ]
}