{
    "sourceFile": "client-app/src/core/services/idle.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1627517528658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1627519487646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Injectable, Inject } from '@angular/core';\r\n import { Store } from '@ngrx/store';\r\n import { coreActions } from '@core/store/core.actions';\r\n-import { WINDOW_REF } from '@libs/shared/settings/common.settings';\r\n+import { WINDOW_REF } from '@core/services/common.settings';\r\n import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n import { IdleAlertModalComponent } from '@core/components/idle-alert-modal/idle-alert-modal.component';\r\n import { idleConstants } from '@core/models/idle.constants';\r\n \r\n"
                }
            ],
            "date": 1627517528658,
            "name": "Commit-0",
            "content": "import { Injectable, Inject } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { coreActions } from '@core/store/core.actions';\r\nimport { WINDOW_REF } from '@libs/shared/settings/common.settings';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { IdleAlertModalComponent } from '@core/components/idle-alert-modal/idle-alert-modal.component';\r\nimport { idleConstants } from '@core/models/idle.constants';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IdleService {\r\n  idleCount = 0;\r\n  constructor(private store: Store, @Inject(WINDOW_REF) private winRef: any, private modalService: NgbModal) {\r\n    this.winRef.addEventListener('mousemove', () => { this.resetIdle(); });\r\n  }\r\n\r\n  resetIdle(): void {\r\n    this.idleCount = 0;\r\n  }\r\n\r\n  scheduleIdleCheck(): void {\r\n    this.store.dispatch(coreActions.scheduleIdleCheck());\r\n  }\r\n\r\n  isIdle(): boolean {\r\n    this.idleCount += 1;\r\n    return this.idleCount > idleConstants.maximumIdleChecksBeforeLogout;\r\n  }\r\n\r\n  displayIdleAlert(onReset: () => void, onTimeout: () => void): void {\r\n    const modalRef = this.modalService.open(IdleAlertModalComponent);\r\n    modalRef.componentInstance.onReset = onReset;\r\n    modalRef.componentInstance.onTimeout = onTimeout;\r\n  }\r\n}\r\n"
        }
    ]
}