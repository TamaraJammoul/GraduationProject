{
    "sourceFile": "client-app/src/core/services/authentication.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528662,
            "name": "Commit-0",
            "content": "import { Observable, from } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Location } from '@angular/common';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { environment } from '@root/environments/environment';\r\nimport { UserClaims } from '@core/models/user-claims.model';\r\nimport { WINDOW_REF } from '@libs/shared/settings/common.settings';\r\nimport { ApplicationRoutes } from '@libs/shared/settings/common.settings';\r\nimport { AuthConfig, OAuthService, NullValidationHandler } from 'angular-oauth2-oidc';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService {\r\n  constructor(private oauthService: OAuthService, private location: Location, @Inject(WINDOW_REF) private winRef: any) {\r\n    // TO KEEP FOR FUTURE DEBUG\r\n    // this.oauthService.events.subscribe(event => console.log(event));\r\n  }\r\n\r\n  logout(): void {\r\n    this.oauthService.logOut();\r\n  }\r\n\r\n  autoLogout(): void {\r\n    this.oauthService.stopAutomaticRefresh();\r\n    this.oauthService.logOut({ autologout: true });\r\n  }\r\n\r\n  configure(initiateAuthenticationFn: () => void, validateOidcCallbackFn: () => void): void {\r\n    this.oauthService.configure(this.getAuthCodeFlowConfig());\r\n    this.oauthService.setupAutomaticSilentRefresh({}, 'access_token');\r\n    this.oauthService.tokenValidationHandler = new NullValidationHandler();\r\n    this.oauthService.loadDiscoveryDocument().then(() =>\r\n      this.isOidcCallback() ? validateOidcCallbackFn() : initiateAuthenticationFn()\r\n    );\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.oauthService.hasValidAccessToken();\r\n  }\r\n\r\n  checkAuthentication(): void {\r\n    if (!this.isAuthenticated()) {\r\n      this.autoLogout();\r\n    }\r\n  }\r\n\r\n  isRootRoute(): boolean {\r\n    return this.location.path() === ApplicationRoutes.Root || this.location.path() === '';\r\n  }\r\n\r\n  validateCallback(): Observable<boolean> {\r\n    return from(this.oauthService.tryLoginCodeFlow().then(() => true));\r\n  }\r\n\r\n  login(): void {\r\n    this.oauthService.initCodeFlow();\r\n  }\r\n\r\n  getUserClaims(): Observable<UserClaims> {\r\n    return from(this.oauthService.loadUserProfile())\r\n      .pipe(\r\n        map(({ email, roles, permissions, features,\r\n          business_entity_code, business_entity_type, business_entity_subtype, given_name, family_name }) => (\r\n          {\r\n            email,\r\n            roles,\r\n            permissions,\r\n            features,\r\n            businessEntityCode: business_entity_code,\r\n            businessEntityType: business_entity_type,\r\n            businessEntitySubType: business_entity_subtype,\r\n            isVenueClient: business_entity_type === 'Company',\r\n            isOrganisationClient: business_entity_type === 'Organisation',\r\n            isIntermediaryClient: business_entity_type === 'Intermediary',\r\n            isWizmeUser: business_entity_type === 'wizme',\r\n            givenName: given_name,\r\n            familyName: family_name\r\n          }\r\n        ) as UserClaims)\r\n      );\r\n  }\r\n\r\n  private isOidcCallback(): boolean {\r\n    return this.winRef.location.search.startsWith('?code');\r\n  }\r\n\r\n  private getAuthCodeFlowConfig(): AuthConfig {\r\n    return {\r\n      issuer: environment.stsServerUrl,\r\n      redirectUri: `${this.winRef.location.origin}`,\r\n      clientId: 'WizmeApps.Venues',\r\n      responseType: 'code',\r\n      scope: 'openid profile offline_access venues_api client_user_profile',\r\n      postLogoutRedirectUri: `${this.winRef.location.origin}`,\r\n      showDebugInformation: false,\r\n      sessionChecksEnabled: true\r\n    };\r\n  }\r\n}\r\n"
        }
    ]
}