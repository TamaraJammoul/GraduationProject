{
    "sourceFile": "client-app/src/core/services/translation.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528657,
            "name": "Commit-0",
            "content": "/* eslint-disable @typescript-eslint/ban-types */\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport localeFr from '@angular/common/locales/fr';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport { Lang } from '@core/models/lang.enum';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { LangDateFormat } from '@libs/shared/models/lang-date-format.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TranslationService {\r\n  dateFormat: LangDateFormat[] = [\r\n    {\r\n      lang:'en',\r\n      dateFormate:'d.M.Y',\r\n    },\r\n    {\r\n      lang:'fn',\r\n      dateFormate:'d.M.Y',\r\n    }]\r\n  ;\r\n  constructor(private translateService: TranslateService) { }\r\n\r\n  use(value: Lang): void {\r\n    this.translateService.use(value);\r\n  }\r\n\r\n  init(): void {\r\n    registerLocaleData(localeFr);\r\n    this.translateService.use(this.translateService.getBrowserLang());\r\n  }\r\n\r\n  getCurrentLang(): Lang {\r\n    return this.translateService.currentLang as Lang;\r\n  }\r\n  getCurrentDateFormat(): string {\r\n    return this.dateFormat.find(x=>x.lang === this.translateService.currentLang).dateFormate;\r\n  }\r\n\r\n  translate(key: string, interpolateParams?: {}): Observable<string> {\r\n    return this.translateService.stream(key, interpolateParams);\r\n  }\r\n\r\n  instantTranslate(key: string) {\r\n    return this.translateService.instant(key);\r\n  }\r\n  // TODO: Make this a property to avoid having multi observables\r\n  currentLang(): Observable<Lang> {\r\n    return this.translateService.onLangChange.pipe(\r\n      startWith({ lang: this.getCurrentLang() }),\r\n      map(res => res.lang as Lang)\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}