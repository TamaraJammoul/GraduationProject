{
    "sourceFile": "client-app/src/core/services/authentication.guard.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528675,
            "name": "Commit-0",
            "content": "import { AuthenticationGuard } from '@core/services/authentication.guard';\r\nimport { configureTestSuite } from '@root/fakes/fakes.utils';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { FakesModule } from '@root/fakes/fakes.module';\r\nimport { AuthenticationService } from '@core/services/authentication.service';\r\nimport { stub } from 'sinon';\r\n\r\ndescribe(AuthenticationGuard.name, () => {\r\n  let authGuard: AuthenticationGuard;\r\n  let authService: AuthenticationService;\r\n\r\n  configureTestSuite(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [FakesModule],\r\n      declarations: [],\r\n      providers: [AuthenticationGuard]\r\n    });\r\n  });\r\n\r\n  beforeEach(() => {\r\n    authGuard = TestBed.inject(AuthenticationGuard);\r\n    authService = TestBed.inject(AuthenticationService);\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(authGuard).toBeTruthy();\r\n  });\r\n\r\n  it('should return true when user is authenticated', () => {\r\n    const stubFn = stub(authService, 'isAuthenticated').callsFake(() => true);\r\n    expect(authGuard.canLoad()).toBeTruthy();\r\n    stubFn.restore();\r\n  });\r\n\r\n  it('should return false when user is not authenticated', () => {\r\n    const stubFn = stub(authService, 'isAuthenticated').callsFake(() => false);\r\n    expect(authGuard.canLoad()).toBeFalsy();\r\n    stubFn.restore();\r\n  });\r\n});\r\n"
        }
    ]
}