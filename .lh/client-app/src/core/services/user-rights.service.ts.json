{
    "sourceFile": "client-app/src/core/services/user-rights.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528656,
            "name": "Commit-0",
            "content": "/* eslint-disable @typescript-eslint/ban-types */\r\nimport { Observable, of } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n// import { Role } from '@core/models/role.enum';\r\nimport { filter, switchMap, map } from 'rxjs/operators';\r\nimport { Store, select, MemoizedSelector, DefaultProjectorFn } from '@ngrx/store';\r\nimport { Feature, ApplicationRoutes } from '@libs/shared/settings/common.settings';\r\nimport { getIsUserStateFetched, getUserRole, getIsAccountManagerUser, getIsCompanyContentManager } from '@core/store/core.selectors';\r\nimport { VenueApplicationRoutes } from '@libs/shared/settings/venue.settings';\r\nimport { RolesEnum } from '@core/models/enumerations/roles.enum';\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserRightsService {\r\n  private features: { [key in Feature]: MemoizedSelector<object, boolean, DefaultProjectorFn<boolean>>; } =\r\n    {\r\n      [Feature.VenuesList]: getIsAccountManagerUser,\r\n      [Feature.EditVenueInformation]: getIsCompanyContentManager,\r\n    };\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  canAccess(feature: Feature): Observable<boolean> {\r\n    if (feature in this.features) {\r\n      return this.canAccessFeature(this.features[feature]);\r\n    }\r\n    return of(false);\r\n  }\r\n\r\n  getStartupRoute(roles: string[]): string{\r\n    if(roles.includes(RolesEnum.BookingManager)) {\r\n      return ApplicationRoutes.Booking;\r\n    }\r\n    if(roles.includes(RolesEnum.AccountsManager)) {\r\n      return ApplicationRoutes.People;\r\n    }\r\n    if(roles.includes(RolesEnum.ContentManager)) {\r\n      return `${VenueApplicationRoutes.Configuration}/${VenueApplicationRoutes.VenuesList}`;\r\n    }\r\n    if(roles.includes(RolesEnum.EmployeesManager)) {\r\n      return ApplicationRoutes.EmployeeList;\r\n    }\r\n\r\n    //Add roles for the rest of the roles\r\n    return ApplicationRoutes.Booking;\r\n  }\r\n\r\n  getStartupRouteTree(): Observable<string> {\r\n    return this.store.pipe(\r\n      select(getUserRole),\r\n      map(role => this.getStartupRoute(role))\r\n    );\r\n  }\r\n\r\n  private canAccessFeature(selector: MemoizedSelector<object, boolean, DefaultProjectorFn<boolean>>): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getIsUserStateFetched),\r\n      filter(isFetched => !!isFetched),\r\n      switchMap(() => this.store.select(selector))\r\n    );\r\n  }\r\n\r\n\r\n}\r\n"
        }
    ]
}