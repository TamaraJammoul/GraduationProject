{
    "sourceFile": "client-app/src/core/services/security-checker.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528658,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { UserClaims } from '@core/models/user-claims.model';\r\nimport { RolesEnum } from '@core/models/enumerations/roles.enum';\r\nimport { FeaturesEnum } from '@core/models/enumerations/features.enum';\r\nimport { PermissionEnum } from '@core/models/enumerations/permissions.enum';\r\nimport { Rules } from '@core/models/enumerations/rules.enum';\r\nimport { BaseListingItem } from '@libs/shared/models/base-listing-item.models';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class SecurityCheckerService {\r\n\r\n    private userClaims: UserClaims;\r\n    private OperatingIntermediary: BaseListingItem;\r\n    private superAdminRole = RolesEnum.AccountManager;\r\n    private ruleMap: { [key: string]: boolean } = {};\r\n    constructor() { }\r\n\r\n    setUserClaims(userClaims: UserClaims) {\r\n        this.userClaims = userClaims;\r\n        this.generateUserRuleMap();\r\n    }\r\n\r\n    setOperatingIntermediary(OperatingIntermediary: BaseListingItem) {\r\n        this.OperatingIntermediary = OperatingIntermediary;\r\n    }\r\n\r\n    generateUserRuleMap() {\r\n        this.ruleMap = {\r\n            [Rules.CanActivateVenue.toString()]: this.hasPermission(PermissionEnum.VenueAddition),\r\n            [Rules.CanAddVenue.toString()]: this.hasPermission(PermissionEnum.VenueActivation),\r\n            [Rules.CanManageBooking.toString()]: this.hasRole(RolesEnum.BookingManager),\r\n            [Rules.CanManageCompanyInfo.toString()]: this.hasRole(RolesEnum.CompanyInfoManager),\r\n            [Rules.CanManageEmployee.toString()]: this.hasRole(RolesEnum.EmployeesManager),\r\n            [Rules.CanManageVenues.toString()]: this.hasRole(RolesEnum.ContentManager),\r\n            [Rules.CanManagePeople.toString()]: this.hasRole(RolesEnum.AccountsManager)\r\n        };\r\n    }\r\n\r\n    canUser(rule: Rules) {\r\n        if (!rule || rule.length === 0) {\r\n            return true;\r\n        }\r\n        return Object.keys(this.ruleMap).includes(rule) && this.ruleMap[rule];\r\n    }\r\n\r\n    hasFeature(feature: FeaturesEnum) {\r\n        if (this.isSuperAdmin() || this.doesUserHasFeature(feature)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    hasRole(role: RolesEnum): boolean {\r\n        if (this.isSuperAdmin() || this.doesUserHasRole(role)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    hasPermission(permission: PermissionEnum) {\r\n        if (this.isSuperAdmin() || this.doesUserHasPermission(permission)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isSuperAdmin(): boolean {\r\n        return this.userClaims.roles.includes(this.superAdminRole);\r\n    }\r\n\r\n    doesUserHasFeature(feature: FeaturesEnum) {\r\n        return this.userClaims.features.includes(feature);\r\n    }\r\n\r\n    doesUserHasRole(role: RolesEnum) {\r\n        return this.userClaims.roles.includes(role);\r\n    }\r\n\r\n    doesUserHasPermission(permission: PermissionEnum) {\r\n        return this.userClaims?.permissions?.includes(permission);\r\n    }\r\n\r\n    isUserCustomer() {\r\n        return this.OperatingIntermediary ? true : false;\r\n    }\r\n\r\n}\r\n"
        }
    ]
}