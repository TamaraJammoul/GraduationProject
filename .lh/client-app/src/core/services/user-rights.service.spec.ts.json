{
    "sourceFile": "client-app/src/core/services/user-rights.service.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528598,
            "name": "Commit-0",
            "content": "import { configureTestSuite } from '@root/fakes/fakes.utils';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { FakesModule } from '@root/fakes/fakes.module';\r\nimport { UserRightsService } from '@core/services/user-rights.service';\r\nimport { provideMockStore, MockStore } from '@ngrx/store/testing';\r\nimport { getIsUserStateFetched, getIsGroupManager } from '@core/store/core.selectors';\r\nimport { Feature } from '@libs/shared/settings/common.settings';\r\nimport { FakeState } from '@root/fakes/fake.state';\r\n\r\ndescribe(UserRightsService.name, () => {\r\n  let userRightsService: UserRightsService;\r\n  let mockStore: MockStore;\r\n\r\n  configureTestSuite(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [FakesModule],\r\n      declarations: [],\r\n      providers: [UserRightsService,\r\n        provideMockStore({ initialState: new FakeState().value })]\r\n    });\r\n  });\r\n\r\n  beforeEach(() => {\r\n    userRightsService = TestBed.inject(UserRightsService);\r\n    mockStore = TestBed.inject(MockStore);\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(userRightsService).toBeTruthy();\r\n  });\r\n\r\n  it('should return canAccess false if feature name is not in the featurs dictionary', () => {\r\n    let result: boolean;\r\n    userRightsService.canAccess('test' as Feature).subscribe(res => result = res);\r\n    expect(result).toBe(false);\r\n  });\r\n\r\n  it('should return canAccess true if feature name is Venues and the user role is Venue admin', () => {\r\n    let result: boolean;\r\n    mockStore.overrideSelector(getIsUserStateFetched, true);\r\n    mockStore.overrideSelector(getIsGroupManager, true);\r\n    userRightsService.canAccess(Feature.VenuesList).subscribe(res => result = res);\r\n    expect(result).toBe(true);\r\n  });\r\n\r\n});\r\n"
        }
    ]
}