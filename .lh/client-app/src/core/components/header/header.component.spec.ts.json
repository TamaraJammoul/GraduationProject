{
    "sourceFile": "client-app/src/core/components/header/header.component.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528676,
            "name": "Commit-0",
            "content": "import { HeaderComponent } from '@core/components/header/header.component';\r\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { configureTestSuite } from '@root/fakes/fakes.utils';\r\nimport { provideMockStore } from '@ngrx/store/testing';\r\nimport { FakesModule } from '@root/fakes/fakes.module';\r\n// import { TranslationService } from '@core/services/translation.service';\r\n// import { spy } from 'sinon';\r\n// import { Lang } from '@core/models/lang.enum';\r\n// import { coreActions } from '@core/store/core.actions';\r\n// import { BsTestHelper } from '@root/fakes/bs-test.helper';\r\n\r\ndescribe(HeaderComponent.name, () => {\r\n  let component: HeaderComponent;\r\n  let fixture: ComponentFixture<HeaderComponent>;\r\n  // let translationService: TranslationService;\r\n  // let store: MockStore;\r\n  // let bsTestHelper: BsTestHelper<HeaderComponent>;\r\n\r\n  configureTestSuite(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        FakesModule\r\n      ],\r\n      declarations: [HeaderComponent],\r\n      providers: [\r\n        provideMockStore()\r\n      ]\r\n    });\r\n  });\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(HeaderComponent);\r\n    // bsTestHelper = new BsTestHelper(fixture);\r\n    component = fixture.componentInstance;\r\n    // translationService = TestBed.inject(TranslationService);\r\n    // store = TestBed.inject(MockStore);\r\n  });\r\n\r\n  it('should create', () => {\r\n    fixture.detectChanges();\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  // Commented because not yet implemented\r\n  // it('should call use with fr when user changes to fr translation from en lang ', () => {\r\n  //   fixture.detectChanges();\r\n  //   bsTestHelper.click('lang-en');\r\n  //   fixture.detectChanges();\r\n  //   const spyFn = spy(translationService, 'use');\r\n  //   fixture.detectChanges();\r\n  //   bsTestHelper.click('lang-fr');\r\n  //   fixture.detectChanges();\r\n  //   expect(spyFn.withArgs(Lang.French).callCount).toBe(1);\r\n  //   spyFn.restore();\r\n  // });\r\n\r\n  // Commented because not yet implemented\r\n  // it('should call use with en when user chooses en translation', () => {\r\n  //   const spyFn = spy(translationService, 'use');\r\n  //   fixture.detectChanges();\r\n  //   bsTestHelper.click('lang-en');\r\n  //   fixture.detectChanges();\r\n  //   expect(spyFn.withArgs(Lang.English).callCount).toBe(1);\r\n  //   spyFn.restore();\r\n  // });\r\n\r\n  // Commented because not yet implemented\r\n  // it('should call logout when user clicks on logout button', () => {\r\n  //   const spyFn = spy(store, 'dispatch');\r\n  //   fixture.detectChanges();\r\n  //   bsTestHelper.click('logout');\r\n  //   fixture.detectChanges();\r\n  //   expect(spyFn.withArgs(coreActions.logout()).callCount).toBe(1);\r\n  //   spyFn.restore();\r\n  // });\r\n\r\n});\r\n"
        }
    ]
}