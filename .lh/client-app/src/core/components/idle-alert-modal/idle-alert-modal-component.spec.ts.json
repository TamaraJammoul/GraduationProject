{
    "sourceFile": "client-app/src/core/components/idle-alert-modal/idle-alert-modal-component.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528675,
            "name": "Commit-0",
            "content": "import { FakesModule } from '@root/fakes/fakes.module';\r\nimport { configureTestSuite } from '@root/fakes/fakes.utils';\r\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { provideMockStore } from '@ngrx/store/testing';\r\nimport { spy } from 'sinon';\r\nimport { IdleAlertModalComponent } from '@core/components/idle-alert-modal/idle-alert-modal.component';\r\nimport { MockComponent } from 'ng-mocks';\r\nimport { SvgIconComponent } from '@libs/shared/components/svg-icon/svg-icon.component';\r\nimport { BsTestHelper } from '@root/fakes/bs-test.helper';\r\n\r\n\r\ndescribe(IdleAlertModalComponent.name, () => {\r\n  let component: IdleAlertModalComponent;\r\n  let fixture: ComponentFixture<IdleAlertModalComponent>;\r\n  let bsTestHelper: BsTestHelper<IdleAlertModalComponent>;\r\n  configureTestSuite(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [FakesModule],\r\n      declarations: [\r\n        MockComponent(SvgIconComponent),\r\n        IdleAlertModalComponent\r\n      ],\r\n      providers: [provideMockStore()]\r\n    });\r\n  });\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(IdleAlertModalComponent);\r\n    component = fixture.componentInstance;\r\n    bsTestHelper = new BsTestHelper(fixture);\r\n\r\n    component.onReset = () => { };\r\n    component.onTimeout = () => { };\r\n  });\r\n  it('should create', () => {\r\n    fixture.detectChanges();\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call reset timeout when resetTimeout is called', () => {\r\n    const spyFyn = spy(component, 'resetTimeout');\r\n    bsTestHelper.click('resetTimeout');\r\n    fixture.detectChanges();\r\n    expect(spyFyn.calledOnce).toBeTruthy();\r\n    spyFyn.restore();\r\n  });\r\n\r\n  it('should call reset timeout when button is clicked', () => {\r\n    const spyFn = spy(component, 'resetTimeout');\r\n    bsTestHelper.click('resetTimeout');\r\n    fixture.detectChanges();\r\n    expect(spyFn.callCount).toBe(1);\r\n    spyFn.restore();\r\n  });\r\n\r\n});\r\n"
        }
    ]
}