{
    "sourceFile": "client-app/src/core/components/alert/alert.component.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528679,
            "name": "Commit-0",
            "content": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { configureTestSuite } from '@root/fakes/fakes.utils';\r\nimport { provideMockStore, MockStore } from '@ngrx/store/testing';\r\nimport { FakeState } from '@root/fakes/fake.state';\r\nimport { FakesModule } from '@root/fakes/fakes.module';\r\nimport { AlertComponent } from '@core/components/alert/alert.component';\r\nimport { BsTestHelper } from '@root/fakes/bs-test.helper';\r\nimport { AlertType } from '@core/models/alert-type.enum';\r\nimport { AlertMessage } from '@core/models/alert-message.model';\r\nimport { spy } from 'sinon';\r\nimport { coreActions } from '@core/store/core.actions';\r\n\r\ndescribe(AlertComponent.name, () => {\r\n  let fixture: ComponentFixture<AlertComponent>;\r\n  let component: AlertComponent;\r\n  let bsTestHelper: BsTestHelper<AlertComponent>;\r\n  let mockStore: MockStore;\r\n  configureTestSuite(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        FakesModule,\r\n      ],\r\n      declarations: [AlertComponent],\r\n      providers: [\r\n        provideMockStore({\r\n          initialState: new FakeState()\r\n            .initCoreState({}).value\r\n        }),\r\n\r\n      ]\r\n    });\r\n  });\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(AlertComponent);\r\n    bsTestHelper = new BsTestHelper(fixture);\r\n    component = fixture.componentInstance;\r\n    mockStore = TestBed.inject(MockStore);\r\n\r\n  });\r\n\r\n  it('should create', () => {\r\n    fixture.detectChanges();\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  xit('should close the alert and dispatch hide function when hide event is called', () => {\r\n    const spyFn = spy(mockStore, 'dispatch');\r\n    component.closed = false;\r\n    component.hide();\r\n    fixture.detectChanges();\r\n\r\n    expect(spyFn.withArgs(coreActions.hideAlert()).callCount).toBe(1);\r\n    expect(bsTestHelper.getByDataTestId('warningMessage')).toBeFalsy();\r\n    spyFn.restore();\r\n  });\r\n\r\n  it('should show success template when type is Success', () => {\r\n    const msg = { title: 'Title', message: 'testing', alertType: AlertType.Success } as AlertMessage;\r\n    mockStore.setState(new FakeState().initCoreState({ alertMessage: msg }).value);\r\n    fixture.detectChanges();\r\n    expect(bsTestHelper.getByDataTestId('successMessage')).toBeTruthy();\r\n  });\r\n\r\n  it('should show error template when type is Error', () => {\r\n    const msg = { title: 'Title', message: 'testing', alertType: AlertType.Error } as AlertMessage;\r\n    mockStore.setState(new FakeState().initCoreState({ alertMessage: msg }).value);\r\n    fixture.detectChanges();\r\n    expect(bsTestHelper.getByDataTestId('errorMessage')).toBeTruthy();\r\n  });\r\n\r\n  it('should show info template when type is Info', () => {\r\n    const msg = { title: 'Title', message: 'testing', alertType: AlertType.Info } as AlertMessage;\r\n    mockStore.setState(new FakeState().initCoreState({ alertMessage: msg }).value);\r\n    fixture.detectChanges();\r\n    expect(bsTestHelper.getByDataTestId('infoMessage')).toBeTruthy();\r\n  });\r\n\r\n  it('should show warning template when type is Warning', () => {\r\n    const msg = { title: 'Title', message: 'testing', alertType: AlertType.Warning } as AlertMessage;\r\n    mockStore.setState(new FakeState().initCoreState({ alertMessage: msg }).value);\r\n    fixture.detectChanges();\r\n    expect(bsTestHelper.getByDataTestId('warningMessage')).toBeTruthy();\r\n  });\r\n\r\n});\r\n"
        }
    ]
}