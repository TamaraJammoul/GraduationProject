{
    "sourceFile": "client-app/src/core/components/app/app.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1627517528677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1627517528677,
            "name": "Commit-0",
            "content": "import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { AuthenticationService } from '@core/services/authentication.service';\r\nimport { coreActions } from '@core/store/core.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { referenceDataActions } from '@libs/reference-data/store/reference-data.actions';\r\nimport { fetchOperatingIntermediary, getUser } from '@core/store/core.selectors';\r\nimport { Router } from '@angular/router';\r\nimport { SecurityCheckerService } from '@core/services/security-checker.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n  providers: [SecurityCheckerService]\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  @ViewChild('sidenav') sideNave: any;\r\n  sideContentOpened = false;\r\n  doesShowSideNav = true;\r\n  constructor(private authService: AuthenticationService,\r\n    private store: Store,\r\n    private router: Router,\r\n    private securityCheckService: SecurityCheckerService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.authService.configure(\r\n      () => this.store.dispatch(coreActions.initiateAuthentication()),\r\n      () => this.store.dispatch(coreActions.validateOidcCallback())\r\n    );\r\n\r\n    this.store.select(getUser).subscribe(userState => {\r\n      if (!!userState.userClaims) {\r\n        this.securityCheckService.setUserClaims(userState.userClaims);\r\n        this.store.dispatch(coreActions.fetchApplicationSettings());\r\n        // Dispatch all reference data actions on init\r\n        for (const [key, value] of Object.entries(referenceDataActions)) {\r\n          if (key.indexOf('Success') === -1 && key !== 'fetchBrandsReferenceList') {\r\n            this.store.dispatch(value());\r\n          }\r\n        }\r\n        if (userState.userClaims.isOrganisationClient) {\r\n          this.store.dispatch(coreActions.fetchOperatingIntermediary());\r\n          this.store.select(fetchOperatingIntermediary).subscribe(operatingIntermediary => {\r\n            this.securityCheckService.setOperatingIntermediary(operatingIntermediary);\r\n          });\r\n          this.router.config.unshift({\r\n            path: '',\r\n            loadChildren: () => import('@organizations/app.module').then((m) => m.AppModule),\r\n          });\r\n        }\r\n        else if (userState.userClaims.isIntermediaryClient) {\r\n          this.router.config.unshift({\r\n            path: '',\r\n            loadChildren: () => import('@intermediaries/app.module').then((m) => m.AppModule),\r\n          });\r\n        }\r\n        else {\r\n          this.router.config.unshift({\r\n            path: '',\r\n            loadChildren: () => import('@venues/app.module').then((m) => m.AppModule),\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleSideContent(): void {\r\n    this.sideContentOpened = !this.sideContentOpened;\r\n  }\r\n\r\n  onMenuRouteChanged(doesShowSideNav: boolean) {\r\n    this.doesShowSideNav = doesShowSideNav;\r\n    this.sideContentOpened = doesShowSideNav;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n  }\r\n}\r\n"
        }
    ]
}